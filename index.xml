<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Varjoinen</title>
    <link>https://varjoinen.github.io/</link>
    <description>Recent content on Varjoinen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://varjoinen.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why not to deliver today?</title>
      <link>https://varjoinen.github.io/posts/why-not-to-deliver-today/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/why-not-to-deliver-today/</guid>
      <description>Is delivering to production painfull and time consuming task that you wouldn&amp;rsquo;t want to do so often? There is always a huge risk of outage or something breaking when applying changes to otherwise stable environment? Developers fear the day of delivery and the sleepless nights they will need to have fixing bugs? There are some crazy people suggesting to deliver even daily, who wants to deal with these issues all the time?</description>
    </item>
    
    <item>
      <title>Software at scale</title>
      <link>https://varjoinen.github.io/posts/software-at-scale/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/software-at-scale/</guid>
      <description>Image by Leo Fosdal
Lately I have been working with a huge project that spans multiple continents, keeps over couple of hundred software professionals busy and is actually managed by agile practices. Keeping this kind of a project up and running and steering it to the right direction is not an easy feat so I thought that sharing some lessons learned could benefit other fellow practitioners.
I&amp;rsquo;ll write about three main points that are crucial for the success of a large scale software project:</description>
    </item>
    
    <item>
      <title>Updating the site</title>
      <link>https://varjoinen.github.io/posts/updating-the-site/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/updating-the-site/</guid>
      <description>I have updated the site, once again. There has been some bigger changes under the hood:
 The site has been moved to Github pages I have migrated content from my Medium account to the site I have automated publishing with Hugo, Github &amp;amp; Travis  Want hear about the migration? Lately I have been pondering about publishing new writings and how to do that easily. Medium is kind of an easy platform for writing &amp;amp; publishing but I don&amp;rsquo;t like their take on GDPR &amp;ldquo;compliance&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Anatomy of microservices</title>
      <link>https://varjoinen.github.io/posts/anatomy-of-microservices/</link>
      <pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/anatomy-of-microservices/</guid>
      <description>This has been earlier published in Medium
Structuring complex systems is an interesting challenge that we often face. That, combined with the need for fast time to market leads us searching for ways to decompose large projects to more manageable pieces providing value as soon as possible. There are multiple ways to approach this but one of the trendiest is microservices architecture. Microservices themselves are small, independent and composable services that have defined set of responsibilities.</description>
    </item>
    
    <item>
      <title>Crafting quality software, chapter 2</title>
      <link>https://varjoinen.github.io/posts/crafting-quality-software-chapter-2/</link>
      <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/crafting-quality-software-chapter-2/</guid>
      <description>Image CC BY 2.0, Elizabeth Hahn
This has been earlier published in Medium
I started a series of writings describing some important aspects of creating quality software. In the first part I focused on one of the most important piece: people. In this second part I’ll circle a bit around the actual software development process and talk about testing.
So why testing is a topic of importance? Wouldn’t it be easier just to write code and run it as good programmers don’t make mistakes nor create buggy code?</description>
    </item>
    
    <item>
      <title>Crafting quality software, chapter 1</title>
      <link>https://varjoinen.github.io/posts/crafting-quality-software-chapter-1/</link>
      <pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/crafting-quality-software-chapter-1/</guid>
      <description>Image CC BY-SA 2.0, Guy Sie
This has been earlier published in Medium
Everyone agrees that it is easy to write clean and functional code that actually works as intended and integrates well to the system it is part of. Of course development processes are also automated from commit to production deployment, feedback is constant through the process from automated quality assurance to production monitoring and proactive customers are eager to help with continuous development efforts.</description>
    </item>
    
    <item>
      <title>Robot Framework 101</title>
      <link>https://varjoinen.github.io/posts/robot-framework-101/</link>
      <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/robot-framework-101/</guid>
      <description>This has been earlier published in Medium
A while ago I had opportunity to familiarize myself with Robot Framework. Although it has extensive user guide, I struggled a little with some of it’s concepts and technical details.
So I thought to write down a “short” introduction that contains basic information about the framework structured to a compact and hopefully easy to understand form.
Introduction So, Robot Framework describes itself as a generic test automation framework especially for acceptance testing.</description>
    </item>
    
    <item>
      <title>Ways to couple</title>
      <link>https://varjoinen.github.io/posts/ways-to-couple/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/ways-to-couple/</guid>
      <description>Image CC-BY-NC, Brett Sayer
This has been earlier published in Medium)
In systems interaction coupling means degree of interdependence. The relationship between two separate system, service or component.
Intrasystem coupling between components of a same system is usually very tight. In object oriented programming classes reference each other directly or through interfaces and changes to a component means changes to others with a high probability. This kind of coupling can be justified and managed inside a system.</description>
    </item>
    
    <item>
      <title>Orchestration vs. choreography</title>
      <link>https://varjoinen.github.io/posts/orchestration-vs-choreography/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/orchestration-vs-choreography/</guid>
      <description>Image CC BY-SA 2.0, hernanpc
This has been earlier published in Medium
Technology nowadays starts to be mature enough for microservices to be adopted by mainstream developers. Containerization, provisioning and build automation tools make it easy to create new services quickly. Focal points for these services are agility in transformation and manageability as microservices have clear responsibilities.
Traditional software mixes multitude of responsibilities and features together and makes it harder to make changes without breaking something in the process.</description>
    </item>
    
    <item>
      <title>Building blocks for a successful multi vendor project</title>
      <link>https://varjoinen.github.io/posts/building-blocks/</link>
      <pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://varjoinen.github.io/posts/building-blocks/</guid>
      <description>Image CC BY-ND 2.0, wespeck, Flickr
This has been earlier published in Medium
Think about a team and challenges it might encounter when developing a great new product. Then multiply the size of those challenges by ten, add bureaucracy, misunderstandings and corporate liabilities to the mix. Execcuting a successful project in a multi vendor environment isn’t an easy task.
I have been helping customers with enterprise integration needs for some time and have seen multitude of obstacles that working with multiple vendors can cause.</description>
    </item>
    
  </channel>
</rss>